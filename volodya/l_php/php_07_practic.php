<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link href="../css/screen.css" type="text/css" rel="stylesheet" />
<link rel="shortcut icon" type="image/ico" href="images/favicon.ico" />

<title>Практика по PHP</title>
</head>

	<body name="top">
<!-- !!!!!!!!!!!!!!!!!       шаблоны, заготовки для тэгов, комментарии !!!!!!!!!!!!!!! -->

<!-- Абзацы, заголовки, комментарии -->
<h4></h4>
<p></p>
<p>

</p>
<p></p>
<!-- Это комментарий HTML -->

<?php  ?>

<?php
/* 
Это область
многострочного комментария,
которая не будет
подвергаться интерпретации 
*/
?>

<!-- Шаблон для PHP кода с комментариями внутри кода -->
<h4></h4>
<p>

</br>
</p>
<p></p>
<?php
// 


// 

?>

<table id="inventory" class="realty">
	<tr><th></th><th></th><th></th></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
</table>


<!-- !!!!!!!!!!!!!!!!!       шаблоны, заготовки для тэгов, комментарии !!!!!!!!!!!!!!! -->
<h4>Использование функции printf</h4>
<p>следующем фрагменте применяется спецификатор преобразования %d, чтобы значение 3 отображалось в виде десятичного числа:</p>
<p>
printf("В вашей корзине находится %d покупки", 3); // Отображение arg в виде целого десятичного числа со знаком<br>
printf("В вашей корзине находится %e покупки", 3); // Отображение arg с использованием научной формы записи<br>
printf("В вашей корзине находится %f покупки", 3); // Отображение arg в виде числа с плавающей точкой<br>
printf("В вашей корзине находится %s покупки", 3); // Отображение arg в виде строки<br>
printf("В вашей корзине находится %u покупки", 3); // Отображение arg в виде беззнакового десятичного числа
</p>
<?php
printf("В вашей корзине находится %d покупки . <br>", 3); // Отображение arg в виде целого десятичного числа со знаком
printf("В вашей корзине находится %e покупки . <br>", 3); // Отображение arg с использованием научной формы записи
printf("В вашей корзине находится %f покупки . <br>", 3); // Отображение arg в виде числа с плавающей точкой
printf("В вашей корзине находится %s покупки . <br>", 3); // Отображение arg в виде строки
printf("В вашей корзине находится %u покупки", 3); // Отображение arg в виде беззнакового десятичного числа
?>

<p>
Предположим, к примеру, что вам нужен цвет, составленный из трех значений:<br>
65 — для красного, 127 — для зеленого и 245 — для синего цвета,<br>
но вам не хочется самостоятельно переводить эти числа в шестнадцатеричный формат.<br>
Для этого есть более простое решение:
</p>
<p>printf("<span color='#%X%X%X'>Привет</span>", 127, 127, 245);</p>
<?php printf("<span color='#%X%X%X'>Привет</span><br>", 127, 127, 245); ?>

<?php printf("Результат: $%.2f", 123.42 / 12); ?>

<p>Пример 7.1. Настройка преставления данных точности</p>
<p>
// Тег, позволяющий отображать все пустые пространства<br>
// Дополнение пробелами до 15 знако-мест<br>
// Дополнение нулями до 15 знако-мест<br>
// Дополнение пробелами до 15 знако-мест и вывод с точностью до двух десятичных знаков<br>
// Дополнение нулями до 15 знако-мест и вывод с точностью до двух десятичных знаков<br>
// Дополнение символами # до 15 знако-мест и вывод с точностью до двух десятичных знаков<br>
</p>
<?php
echo "<pre>"; // Тег, позволяющий отображать все пустые пространства
// Дополнение пробелами до 15 знако-мест
printf("Результат равен $%15f\n", 123.42 / 12);
// Дополнение нулями до 15 знако-мест
printf("Результат равен $%015f\n", 123.42 / 12);
// Дополнение пробелами до 15 знако-мест и вывод с точностью до двух десятичных знаков
printf("Результат равен $%15.2f\n", 123.42 / 12);
// Дополнение нулями до 15 знако-мест и вывод с точностью до двух десятичных знаков
printf("Результат равен $%015.2f\n", 123.42 / 12);
// Дополнение символами # до 15 знако-мест и вывод с точностью до двух десятичных знаков
printf("Результат равен $%'#15.2f\n", 123.42 / 12);
?>


<p>Пример 7.2. Дополнение строк</p>
<?php
echo "<pre>"; // Тег, позволяющий отображать все пустые пространства
$h = 'Rasmus';
printf("[%s]\n", $h); // Стандартный вывод строки
printf("[%12s]\n", $h); // Выравнивание пробелами по правому краю до ширины 12
printf("[%-12s]\n", $h); // Выравнивание пробелами по левому краю
printf("[%012s]\n", $h); // Дополнение нулями
printf("[%'#12s]\n\n", $h); // Использование специально выбранного символа дополнения '#'
$d = 'Rasmus Lerdorf';
printf("[%s]\n", $d); // Стандартный вывод строки
printf("[%12.8s]\n", $d); // Выравнивание по правому краю с усечением до 8 символов
printf("[%-12.12s]\n", $d); // Выравнивание по левому краю с усечением до 12 символов
printf("[%-'@12.10s]\n", $d); // Выравнивание по левому краю, дополнение символом '@', усечение до 10 символов
?>
<p>

</p>


<h4>Функции даты и времени</h4>
<p>
echo time(); - 1609001793<br>
echo mktime(0, 0, 0, 1, 1, 2000);<br>
date($format, $timestamp);<br>
echo date("l F jS, Y - g:ia", time());
</p>
<?php 
echo time() . "<br>";
echo mktime(0, 0, 0, 1, 1, 2000) . "<br>";
echo date("l F jS, Y - g:ia", time());
?>

<p>Таблица 7.4. Основные спецификаторы формата, использующиеся в функции date</p>
<table id="inventory" class="realty">
	<tr><th>Формат</th><th>Описание</th><th>Возвращаемое значение</th></tr>
	<tr><td></td><td>Спецификаторы дня</td><td></td></tr>
	<tr><td>d</td><td>День месяца, две цифры с лидирующими нулями</td><td>От 01 до 31</td></tr>
	<tr><td>D</td><td>День недели, составленный из трех букв</td><td>От Mon до Sun</td></tr>
	<tr><td>j</td><td>День месяца без лидирующих нулей</td><td>От 1 до 31</td></tr>
	<tr><td>l</td><td>День недели полностью</td><td>От Sunday до Saturday</td></tr>
	<tr><td>N</td><td>День недели, число, от понедельника до воскресенья</td><td>От 1 до 7</td></tr>
	<tr><td>S</td><td>Суффикс для дня месяца (пригодится в сочетании со спецификатором j)</td><td>st, nd, rd или th</td></tr>
	<tr><td>w</td><td>День недели, число, от воскресенья до субботы</td><td>От 0 до 6</td></tr>
	<tr><td>z</td><td>День года</td><td>От 0 до 365</td></tr>
	<tr><td></td><td>Спецификатор недели</td><td></td></tr>
	<tr><td>W</td><td>Номер недели в году</td><td>От 01 до 52</td></tr>
	<tr><td></td><td>Спецификаторы месяца</td><td></td></tr>
	<tr><td>F</td><td>Название месяца</td><td>От January до December</td></tr>
	<tr><td>m</td><td>Номер месяца с лидирующими нулями</td><td>От 01 до 12</td></tr>
	<tr><td>M</td><td>Название месяца, составленное из трех букв</td><td>От Jan до Dec</td></tr>
	<tr><td>n</td><td>Номер месяца без лидирующих нулей</td><td>От 1 до 12</td></tr>
	<tr><td>t</td><td>Количество дней в заданном месяце</td><td>28, 29, 30 или 31</td></tr>
	<tr><td></td><td>Спецификаторы года</td><td></td></tr>
	<tr><td>L</td><td>Високосный год</td><td>1 — Да, 0 — Нет</td></tr>
	<tr><td>Y</td><td>Год, четыре цифры</td><td>От 0000 до 9999</td></tr>
	<tr><td>y</td><td>Год, две цифры</td><td>От 00 до 99</td></tr>
	<tr><td></td><td>Спецификаторы времени</td><td></td></tr>
	<tr><td>a</td><td>До или после полудня, в нижнем регистре</td><td>am или pm</td></tr>
	<tr><td>A</td><td>До или после полудня, в верхнем регистре</td><td>AM или PM</td></tr>
	<tr><td>g</td><td>Час суток, 12-часовой формат без лидирующих нулей</td><td>От 1 до 12</td></tr>
	<tr><td>G</td><td>Час суток, 24-часовой формат без лидирующих нулей</td><td>От 00 до 23</td></tr>
	<tr><td>h</td><td>Час суток, 12-часовой формат с лидирующими нулями</td><td>От 01 до 12</td></tr>
	<tr><td>H</td><td>Час суток, 24-часовой формат с лидирующими нулями</td><td>От 00 до 23</td></tr>
	<tr><td>i</td><td>Минуты с лидирующими нулями</td><td>От 00 до 59</td></tr>
	<tr><td>s</td><td>Секунды с лидирующими нулями</td><td>От 00 до 59</td></tr>
	<tr><td></td><td></td><td></td></tr>
	
</table>

<h4>Функция checkdate</h4>
<p>Пример 7.3. Проверка допустимости даты</p>
<p>
$month = 9; // Сентябрь (в котором только 30 дней)<br>
$day = 31; // 31-е<br>
$year = 2018; // 2018<br>
if (checkdate($month, $day, $year)) echo "Допустимая дата";<br>
else echo "Недопустимая дата";
</p>
<?php
$month = 9; // Сентябрь (в котором только 30 дней)
$day = 31; // 31-е
$year = 2018; // 2018
if (checkdate($month, $day, $year)) echo "Допустимая дата";
else echo "Недопустимая дата";
?>



<h4>
Работа с файлами<br>
Проверка существования файла
</h4>
<p>if (file_exists("testfile.txt")) echo "Файл существует"; else echo "Файла НЕТ";</p>
<?php if (file_exists("testfile.txt")) echo "Файл существует"; else echo "Файла НЕТ"; ?>


<h4>Создание файла</h4>
<p>Пример 7.4. Создание простого текстового файла</p>
<p>
$fh = fopen("testfile.txt", 'w') or die("Создать файл не удалось");<br>
$text = <<<_END<br>
Строка 1<br>
Строка 2<br>
Строка 3<br>
_END;<br>
fwrite($fh, $text) or die("Сбой записи файла");<br>
fclose($fh);<br>
echo "Файл 'testfile.txt' записан успешно ";<br>
</p>
<?php // testfile.php
$fh = fopen("testfile.txt", 'w') or die("Создать файл не удалось");
$text = <<<_END
Строка 1
Строка 2
Строка 3
_END;
fwrite($fh, $text) or die("Сбой записи файла");
fclose($fh);
echo "Файл 'testfile.txt' записан успешно ";
?>
<p>В этом простом примере показана последовательность работы со всеми файлами.</p>
<p>1. Все начинается с открытия файла с помощью вызова функции fopen.</p>
<p>2. После этого можно вызывать другие функции. В данном случае в файл велась запись (fwrite),
но можно также читать данные из уже существующего файла (fread или fgets) и осуществлять с ним другие действия.</p>
<p>3. Работа завершается закрытием файла (fclose). Хотя программа перед завершением своей работы делает это за вас,
но все же вы должны удостовериться в том, что по окончании работы с файлом он будет закрыт.</p>

<h4>Таблица 7.5. Режимы работы, поддерживаемые функцией fopen</h4>
<table id="inventory" class="realty">
	<tr><th>Режим</th><th>Действие</th><th>Описание</th></tr>
	<tr><td>'r'</td><td>Чтение с начала файла</td><td>Открытие файла только для чтения; установка указателя файла на его начало. Возвращение FALSE, если файла не существует</td></tr>
	<tr><td>'r+'</td><td>Чтение с начала файла с возможностью записи</td><td>Открытие файла для чтения и записи; установка указателя файла на его начало. Возвращение FALSE, если файла не существует</td></tr>
	<tr><td>'w'</td><td>Запись с начала файла с усечением его размера</td><td>Открытие файла только для записи; установка указателя файла на его начало и сокращение размера файла до нуля. Если файла не существует, попытка его создания</td></tr>
	<tr><td>'w+'</td><td>Запись с начала файла с усечением его размера и возможностью чтения</td><td>Открытие файла для чтения и записи; установка указателя файла на его начало и сокращение его размера до нуля. Если файла не существует, попытка его создания</td></tr>
	<tr><td>'a'</td><td>Добавление к концу файла</td><td>Открытие файла только для записи; установка указателя файла на его конец. Если файла не существует, попытка его создания</td></tr>
	<tr><td>'a+'</td><td>Добавление к концу файла с возможностью чтения</td><td>Открытие файла для чтения и записи; установка указателя файла на его конец. Если файла не существует, попытка его создания</td></tr>
	</table>


<h4>Чтение из файлов</h4>
<p>Пример 7.5. Чтение файла с помощью функции fgets</p>
<p>
$fh = fopen("testfile.txt", 'r') or<br>
die("Файл не существует, или вы не обладаете правами на его открытие");<br>
$line = fgets($fh) - // fgets (последняя буква s в названии функции означает string — «строка»).;<br>
fclose($fh);<br>
echo $line;
</p>
<?php
$fh = fopen("testfile.txt", 'r') or
die("Файл не существует, или вы не обладаете правами на его открытие");
$line = fgets($fh); // fgets (последняя буква s в названии функции означает string — «строка»).
fclose($fh);
echo $line;
?>

<p>Можно также извлечь из файла сразу несколько строк или фрагменты строк, воспользовавшись функцией fread, как показано в примере 7.6.<br>
Пример 7.6. Чтение файла с помощью функции fread</p>
<p>
$fh = fopen("testfile.txt", 'r') or<br>
die("Файл не существует, или вы не обладаете правами на его открытие");<br>
$text = fread($fh, 3) - // При вызове функции fread было запрошено чтение трех символов;<br>
fclose($fh);<br>
echo $text;
</p>
<?php
$fh = fopen("testfile.txt", 'r') or
die("Файл не существует, или вы не обладаете правами на его открытие");
$text = fread($fh, 3); // При вызове функции fread было запрошено чтение трех символов
fclose($fh);
echo $text;
?>
<p></p>


<h4>Копирование файлов</h4>
<p>Пример 7.7. Копирование файла</p>
<p>
copy('testfile.txt', 'testfile2.txt') or die("Копирование невозможно");<br>
echo "Файл успешно скопирован в 'testfile2.txt'";
</p>
<?php // copyfile.php
//copy('testfile.txt', 'testfile2.txt') or die("Копирование невозможно");
//echo "Файл успешно скопирован в 'testfile2.txt'";
?>

<p>Пример 7.8. Альтернативный синтаксис для копирования файла</p>
<p>
if (!copy('testfile.txt', 'testfile2.txt')) echo " Копирование невозможно";<br>
else echo "Файл успешно скопирован в 'testfile2.txt'";
</p>
<?php // copyfile2.php
//if (!copy('testfile.txt', 'testfile2.txt')) echo " Копирование невозможно";
//else echo "Файл успешно скопирован в 'testfile2.txt'";
?>

<h4>Перемещение файла</h4>
<p>Пример 7.9. Перемещение файла</p>
<p>
if (!rename('testfile2.txt', 'testfile2.new'))<br>
echo "Переименование невозможно";<br>
else echo "Файл успешно переименован в 'testfile2.new'";
</p>
<?php // movefile.php
//if (!rename('testfile2.new', 'testfile2.txt'))
//echo "Переименование невозможно";
//else echo "Файл успешно переименован в 'testfile2.new'";
?>


<h4>Удаление файла</h4>
<p>Пример 7.10. Удаление файла</p>
<p>
if (!unlink('testfile2.new')) echo "Удаление невозможно ";<br>
else echo "Файл 'testfile2.new' удален успешно";
</p>
<?php // deletefile.php
if (!unlink('testfile2.txt')) echo "Удаление невозможно ";
else echo "Файл 'testfile2.txt' удален успешно";
?>


<h4>Обновление файла</h4>
<p>Пример 7.12. Обновление файла с использованием блокировки</p>
<p>
$fh = fopen("testfile.txt", 'r+') or die("Сбой открытия файла");<br>
Эта программа открывает файл testfile.txt для чтения и записи, для чего указывается режим работы '+r', в котором указатель устанавливается в самое начало файла.<br>
$text = fgets($fh);<br>
функция fgets, с помощью которой из файла считывается одна строка (до встречи первого символа перевода строки).<br>
if (flock($fh, LOCK_EX))<br>
{<br>
fseek($fh, 0, SEEK_END);<br>
Параметр SEEK_END предписывает функции переместить указатель файла в его конец, а параметр 0 показывает, на сколько позиций нужно вернуться назад из этой позиции.<br>
fwrite($fh, "$text") or die("Сбой записи в файл");<br>
flock($fh, LOCK_UN);<br>
При первом вызове flock с помощью параметра LOCK_EX устанавливается эксклюзивная блокировка того файла<br>
}<br>
fclose($fh);<br>
echo "Файл 'testfile.txt' успешно обновлен";
</p>
<?php
//$fh = fopen("testfile.txt", 'r+') or die("Сбой открытия файла"); // Эта программа открывает файл testfile.txt для чтения и записи, для чего указывается режим работы '+r', в котором указатель устанавливается в самое начало файла.
//$text = fgets($fh); // функция fgets, с помощью которой из файла считывается одна строка (до встречи первого символа перевода строки).
//if (flock($fh, LOCK_EX))
//{
//fseek($fh, 0, SEEK_END); // Параметр SEEK_END предписывает функции переместить указатель файла в его конец, а параметр 0 показывает, на сколько позиций нужно вернуться назад из этой позиции.
//fwrite($fh, "$text") or die("Сбой записи в файл");
//flock($fh, LOCK_UN); // При первом вызове flock с помощью параметра LOCK_EX устанавливается эксклюзивная блокировка того файла
//}
//fclose($fh);
//echo "Файл 'testfile.txt' успешно обновлен";
?>

<h4>Загрузка файлов на веб-сервер</h4>
<p>Пример 7.15. Программа для загрузки изображений, хранящаяся в файле upload.php</p>
<p>
echo <<<_END<br>
html>head>title>PHP-форма для загрузки файлов на сервер/title>/head>body><br>
form method='post' action='php_07_practic.php' enctype='multipart/form-data'><br>
Выберите файл: input type='file' name='filename' size='10'><br>
input type='submit' value='Загрузить'><br>
/form><br>
_END;<br>
if ($_FILES)<br>
{<br>
$name = $_FILES['filename']['name'];<br>
move_uploaded_file($_FILES['filename']['tmp_name'], $name);<br>
echo "Загружаемое изображение '$name'br>img src='$name'>";<br>
}<br>
echo "/body>/html>";<br>
</p>
<?php // php_07_practic.php
echo <<<_END
<html><head><title>PHP-форма для загрузки файлов на сервер</title></head><body>
<form method='post' action='php_07_practic.php' enctype='multipart/form-data'>
Выберите файл: <input type='file' name='filename' size='10'>
<input type='submit' value='Загрузить'>
</form>
_END;
if ($_FILES)
{
$name = $_FILES['filename']['name'];
move_uploaded_file($_FILES['filename']['tmp_name'], $name);
echo "Загружаемое изображение '$name'<br><img src='$name'>";
}
echo "</body></html>";
?>


<p>Пример 7.16. Более безопасная версия upload.php</p>
<?php // upload2.php
echo <<<_END
<html><head><title>PHP-форма для загрузки файлов
на сервер</title></head><body>
<form method='post' action='upload2.php' enctype='multipart/form-data'>
Выберите файл с расширением JPG, GIF, PNG или TIF:
<input type='file' name='filename' size='10'>
<input type='submit' value='Загрузить'></form>
_END;
if ($_FILES)
{
$name = $_FILES['filename']['name'];
switch($_FILES['filename']['type'])
{
case 'image/jpeg': $ext = 'jpg'; break;
case 'image/gif': $ext = 'gif'; break;
case 'image/png': $ext = 'png'; break;
case 'image/tiff': $ext = 'tif'; break;
default: $ext = ''; break;
}
if ($ext)
{
$n = "image.$ext";
move_uploaded_file($_FILES['filename']['tmp_name'], $n);
echo "Загружено изображение '$name' под именем '$n':<br>";
echo "<img src='$n'>";
}
else echo "'$name' — неприемлемый файл изображения";
}
else echo "Загрузки изображения не произошло";
echo "</body></html>";
?>


<p>
применение только буквенно-цифровых символов и точки, что можно сделать с помощью следующей команды, использующей регулярное выражение
(см. главу 17) для осуществления поиска и замены символов в значении переменной $name:
</p>
<?php $name = ereg_replace("[^A-Za-z0-9.]", "", $name); ?>


<p>
одновременно с предыдущими действиями переводит все символы верхнего регистра в нижний:
</p>
<?php $name = strtolower(ereg_replace("[^A-Za-z0-9.]", "", $name)); ?>




		<p align="center">
		<a onclick="javascript: history.back(); return falshe;"><img src="../images/esc2.png" id="send"/></a>
		<a href="#top" title="Наверх"><img src="../images/buttonUpActive.png"/></a>
		</p>
	</body>
</html>