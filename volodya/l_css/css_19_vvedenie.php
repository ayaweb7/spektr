<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link href="../css/screen.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="../js/mistakes.js"></script>
<link rel="shortcut icon" type="image/ico" href="images/favicon.ico" />

<title>Введение в CSS</title>
<!--
<style>
ol ol {
	list-style-type: lower-alpha;
}
</style>
-->
</head>

	<body name="top">
<!-- !!!!!!!!!!!!!!!!!       шаблоны, заготовки для тэгов, комментарии !!!!!!!!!!!!!!! -->

<!-- Абзацы, заголовки, комментарии -->
<h4></h4>
<p>

</br>
</p>
<p></p>
<!-- Это комментарий HTML -->



<?php
/* 
Это область
многострочного комментария,
которая не будет
подвергаться интерпретации 
*/
?>

<!-- Шаблон для PHP кода с комментариями внутри кода -->
<h4></h4>
<p>

</br>
</p>
<p></p>
<?php
// 


// 

?>

<table id="inventory" class="realty">
	<tr><th></th><th></th><th></th></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
</table>

<h1 style='color: blue;'></h1>
<?php  ?>
<!-- !!!!!!!!!!!!!!!!!       шаблоны, заготовки для тэгов, комментарии !!!!!!!!!!!!!!! -->

<h4>Импортирование таблицы стилей</h4>
<p>
style><br>
@import url('styles.css');<br>
/style>
</p>
<p>
Эта инструкция заставляет браузер извлечь таблицу стилей с именем styles.css.<br>
Гибкость, присущая команде @import, позволяет создавать таблицы стилей, которые сами импортируют другие таблицы стилей, а те,
в свою очередь, могут импортировать другие таблицы
</p>

<h4>Импортирование CSS из HTML-кода</h4>
<p>
Включить таблицу стилей можно также с помощью HTML-тега link>:<br>
link rel='stylesheet' type='text/css' href='styles.css'>
</p>
<p>
Результат будет точно таким же, как и при использовании директивы @import, но link> является тегом, применяемым только в HTML,
и не относится к стилевым директивам, поэтому он не может задействоваться в одной таблице стилей для импорта другой такой таблицы.
</p>

<h4>Встроенные настройки стиля</h4>
<p>
Можно также выполнять индивидуальные настройки или заменять конкретные стили, вставляя объявления стилей непосредственно в код HTML следующим образом
(в данном случае внутри тегов задается курсивный текст синего цвета):<br>
div style='font-style:italic; color:blue;'>Всем привет /div>
</p>

<h4>Идентификаторы (ID)</h4>
<p>
Более удачным решением для настроек стиля отдельно взятого элемента является назначение формирующему его HTML-коду идентификатора:<br>
div id='welcome'>Всем привет/div>
</p>
<p>
Тем самым устанавливается, что содержимое div>-контейнера с идентификатором, имеющим значение welcome, должно иметь применяемый к нему стиль,
который определен в стилевых настройках welcome. Соответствующая CSS-инструкция для этого может иметь такой вид:<br>
#welcome { font-style:italic; color:blue; }
</p>
<p>
Обратите внимание на использование символа решетки (#),
который указывает на то, что эта инструкция задает стилевые настройки только для идентификатора по имени welcome.
</p>

<h4>Классы</h4>
<p>
Если нужно применить один и тот же стиль ко многим элементам, не следует давать каждому из них особый ID,
поскольку можно указать класс для управления всеми этими элементами:<br>
div class='welcome'>Привет/div>
</p>
<p>
Тем самым утверждается, что стиль, определенный в классе iblue, должен применяться к содержимому данного элемента
(и любых других элементов, относящихся к этому классу).<br>
При использовании класса можно либо в заголовке страницы, либо во внешней таблице стилей задействовать для настройки стилей класса следующее правило:<br>
.welcome { font-style:italic; color:blue; }
</p>
<p>
Вместо использования символа решетки (#), который закреплен за идентификаторами (ID), инструкции, относящиеся к классу, предваряются символом точки (.).
</p>
<p>
Разница между идентификатором CSS и классом CSS заключается в том, что идентификатор применяется только к одному элементу,
а класс можно применить ко многим элементам.
</p>

<h4>Точки с запятой</h4>
<p>
В CSS точки с запятой применяются в качестве разделителей нескольких инструкций CSS, расположенных в одной и той же строке.<br>
Но при наличии в правиле только одной инструкции (или при встраивании настройки стиля в HTML-теге) точку с запятой можно опустить,
и то же самое можно сделать в отношении последней инструкции в группе.
</p>
<p>
Но чтобы при использовании CSS избавиться от ошибок, которые трудно будет распознать, можно взять за правило использовать точку с запятой
после каждой настройки CSS.<br> В дальнейшем их можно копировать и вставлять или же изменять свойства, не заботясь об удалении точек с запятой там,
где они в принципе не нужны, или о добавлении их туда, где они необходимы.
</p>

<h4>Правила CSS</h4>
<p>
Каждая инструкция в CSS-правиле начинается с селектора, являющегося элементом, к которому будет применяться правило.
Например, в следующем назначении h1 является селектором, для которого задается размер шрифта на 240 % больше, чем у используемого по умолчанию:
h1 { font-size:240%; }
</p>
<p>
font-size является свойством.
Задавая для принадлежащего селектору h1 свойства font-size значение 240%, мы гарантируем, что содержимое всех пар тегов h1>.../h1>
будет отображено с размером шрифта, превосходящим на 240 % исходный размер.<br>
Все изменения в правиле должны быть внутри символов { и }, следующих за селектором. В font-size:240%; та часть, которая находится перед : (двоеточием)
является свойством, а все остальное — применяемым к нему значением.
</p>
<p>
И наконец, следует точка с запятой (;), завершающая инструкцию.<br>
В данном примере, поскольку font-size является последним свойством правила, точка с запятой не требуется
(но она должна присутствовать, если за этим свойством будет задано значение еще одного свойства).
</p>

<h4>Множественные задания стиля</h4>
<p>
Задать несколько стилевых настроек можно двумя разными способами. Можно объединить их в одной строке:<br>
h1 { font-size:240%; color:blue; }<br>
Здесь добавлено второе задание стиля, изменяющее цвет всех заголовков, задаваемых тегом h1>, на синий.
</p>
<p>
Можно также расположить задания построчно:<br>
h1 { font-size:240%;<br>
color:blue; }
</p>
<p>
Или же можно разнести задания еще дальше, расположив столбцами по двоеточиям:<br>
h1 {<br>
font-size :240%;<br>
color :blue;<br>
}
Тогда будет проще заметить, где начинается каждый новый набор правил, поскольку селектор всегда находится в первом столбце,
а следующие за ним задания аккуратно выстраиваются благодаря одинаковому горизонтальному смещению всех значений свойств.
</p>

<h4>Использование комментариев</h4>
<p>
CSS-правила желательно прокомментировать: пусть даже не все или не основную их часть, а только главную группу инструкций.
Это можно сделать двумя способами. Можно, например, разместить комментарии внутри пары следующих тегов:<br>
/* Это комментарий CSS */
</p>
<p>
Или же можно развернуть комментарий на несколько строк:<br>
/*<br>
Много-<br>
строчный<br>
комментарий<br>
*/
</p>

<h4>Типы стилей</h4>
<p>
Существует несколько разных типов стилей, начиная с исходных стилей, установленных в вашем браузере
(и любых пользовательских стилей, которые вы можете применить в своем браузере, чтобы переопределить исходные значения),
продолжая вложенными или встроенными стилями и заканчивая внешними таблицами стилей.<br>
Для стилей, которые были определены, действует иерархическая последовательность выполнения, направленная снизу вверх.
</p>
<h4>Исходные стили</h4>
<p>
В браузере применяется задание исходных стилей, имеющих самый низкий уровень приоритета.<br>
Этот набор стилей создается на тот случай, когда у веб-страницы нет определений каких-нибудь других стилей.<br>
Он предназначен для использования в качестве общего набора стилей, достаточно корректно отображаемого в большинстве случаев.
</p>

<h4>Пользовательские стили</h4>
<p>
Далее по уровню возрастания приоритета следуют стили, определенные пользователем.
Они поддерживаются большинством современных браузеров, но в каждом из них реализованы по-своему.
</p>

<h4>Внешние таблицы стилей</h4>
<p>
К следующему типу относятся стили, которые задаются во внешней таблице стилей и заменяют любые стили, заданные как пользователем, так и браузером.<br>
Внешние таблицы стилей являются рекомендуемым способом создания ваших стилей, поскольку вы можете создавать разные таблицы стилей для разных целей,
например для общего использования в Интернете, для просмотра страниц на браузерах мобильных устройств с небольшими экранами, для получения распечатки и т. д.
</p>
<p>Нужно будет просто применить при создании веб-страницы один нужный набор стилей для каждого типа носителя информации.</p>

<h4>Внутренние стили</h4>
<p>
Затем следуют внутренние стили, создаваемые внутри тегов style>.../style>, которые имеют более высокий уровень приоритета над всеми предыдущими типами стилей.

</p>
<p>
Но с этого момента принцип разделения стилевого оформления и содержимого начинает нарушаться, поскольку любые внешние таблицы стилей,
загруженные в то же самое время, будут иметь более низкий уровень приоритета.
</p>

<h4>Внедренные стили</h4>
<p>
И наконец, рассмотрим внедренные стили, представляющие собой назначение свойства непосредственно элементу.<br>
Они также имеют наивысший уровень приоритета над любым типом стилей, и их использование имеет следующий вид:<br>
a href="http://google.com" style="color:green;">Посетите Google/a>
</p>
<p>
В этом примере определяемая ссылка будет отображена зеленым цветом, независимо от любых исходных или других цветовых настроек,
применяемых любой другой таблицей стилей либо непосредственно к этой ссылке, либо общим порядком ко всем ссылкам.
</p>

<h4>Селекторы CSS</h4>
<p>
Средства доступа к одному или нескольким элементам называются селекцией, а та часть правила CSS, которая этим занимается, известна как селектор.
И, как вы уже, наверное, догадались, существует множество разнообразных селекторов.
</p>
<h4>Селектор типа</h4>
<p>
Селектор типа работает в отношении типов HTML-элементов, например p> или i>.<br>
Следующее правило, к примеру, обеспечивает полное выравнивание всего текста, находящегося между тегами p>.../p>:<br>
p { text-align:justify; }
</p>

<h4>Селектор потомков</h4>
<p>
Селекторы потомков позволяют применять стили к элементам, содержащимся внутри других элементов.<br>
Например, следующее правило настраивает вывод всего текста внутри тегов b>.../b> красным цветом, но только если эти теги окажутся внутри тегов
p>.../p> (как в этом случае:<br> p>b>Hello/b> there/p>):<br>
p b { color:red; }
</p>
<p>
В качестве практического примера представим себе, что нужно использовать другую систему нумерации,
отличающуюся от исходной для пронумерованного списка, вложенного в другой пронумерованный список.<br>
Этого можно достичь следующим способом, заменяющим исходную нумерацию (начинающуюся с 1) буквами в нижнем регистре (начинающимися с a):
</p>
<p>
head><br>
style><br>
ol ol { list-style-type:lower-alpha; }<br>
/style><br>
/head><br>
body><br>
ol><br>
li>Один /li><br>
li>Два /li><br>
li>Три<br>
ol><br>
li>Один /li><br>
li>Два /li><br>
li>Три /li><br>
/ol><br>
/li><br>
/ol><br>
/body>
</p>

<p style='color: blue;'>Start code</p>
<ol>
	<li>Один</li>
	<li>Два</li>
	<li>Три
		<ol style='list-style-type: lower-alpha; color: red;'>
			<li>Один</li>
			<li>Два</li>
			<li>Три</li>
		</ol>
	</li>
</ol>

<h4>Селектор дочерних элементов</h4>
<p>
Селектор дочерних элементов похож на селектор потомков, но он еще больше конкретизирует область применения стиля,
выбирая только те элементы, которые являются непосредственными дочерними элементами другого элемента.<br>
Например, следующий код использует селектор потомков, который изменит цвет любого текста, выделенного полужирным шрифтом, внутри абзаца на красный,
даже если сам полужирный текст находится внутри выделения курсивом (подобно следующему коду:<br> p>i>b>Привет/b> всем/i>/p>):<br>
p b { color:red; }
</p>
<p>
В данном случае слово Привет отображается красным цветом.<br>
Но когда этот более общий тип поведения не требуется, чтобы сузить область применения селектора еще больше, может использоваться селектор дочерних элементов.
Например, следующий селектор дочерних элементов установит красный цвет для текста, выделенного полужирным шрифтом только в том случае,
если элемент будет непосредственным дочерним элементом абзаца и внутри не содержится другого элемента:<br>
p > b { color:red; }
</p>
<p>
Теперь слово Привет не изменит свой цвет, потому что оно не является непосредственным дочерним элементом абзаца.
</p>

<h4>Селектор элементов, имеющих идентификатор</h4>
<p>
Если у элемента есть имя-идентификатор (наподобие следующего: div id='mydiv'>), к нему можно обратиться из CSS напрямую следующим способом,
выделяющим весь текст в названном элементе курсивом:<br>
#mydiv { font-style:italic; }
</p>
<p>
Поскольку идентификаторы обычно применяются только к уникальным элементам, следующее правило будет задавать подчеркивание только первому появлению myid:<br>
#myid { text-decoration:underline; }
</p>
<p>
Но можно добиться того, чтобы правило в CSS применялось к обоим появлениям данного идентификатора:<br>
span#myid { text-decoration:underline; }<br>
div#myid { text-decoration:underline; }
</p>
<p>
Или в сокращенной записи (см. далее раздел «Групповая селекция»):<br>
span#myid,div#myid { text-decoration:underline; }
</p>

<h4>Селектор класса</h4>
<p>
Когда на странице имеются элементы, для которых нужно применить один и тот же стиль, всем этим элементам можно задать одно и то же имя класса, например:<br>
span class='myclass'>
</p>
<p>
а затем создать единое правило для одновременного изменения всех этих элементов, как в следующем правиле.
Оно создает смещение левого края на 10 пикселов для всех элементов, которые используют данный класс:<br>
.myclass { margin-left:10px; }
</p>
<p>
Вы можете сузить область действия класса, указав тип элементов, к которым должно применяться правило.
Например, следующее правило применяет настройки только к абзацам, использующим класс main:<br>
p.main { text-indent:30px; }
</p>

<h4>Селектор атрибутов</h4>
<p>
Многие HTML-теги поддерживают атрибуты, и использование селектора данного типа может избавить вас от применения идентификаторов и
классов для ссылок на элементы, задаваемые этими тегами. Например, можно непосредственно сослаться на атрибуты следующим образом,
установив для всех элементов, задействующих атрибут type="submit", ширину, равную 100 пикселам:<br>
[type="submit"] { width:100px; }
</p>
<p>
Если нужно ограничить область действия селектора до, к примеру, элементов ввода, принадлежащих форме и имеющих это значение атрибута типа,
можно вместо предыдущего воспользоваться следующим правилом:<br>
form input[type="submit"] { width:100px; }
</p>

<h4>Универсальный селектор</h4>
<p>
Групповой символ *, или универсальный селектор, соответствует любому элементу, поэтому следующее правило приведет к полному беспорядку в документе,
установив зеленое обрамление для всех его элементов:<br>
* { border:1px solid green; }
</p>
<p>
Скорее всего, универсальный селектор будет использоваться не сам по себе, а как часть какого-нибудь составного правила, где он будет весьма эффективен.
Например, следующее правило будет применять тот же самый стиль, что предыдущее, но только ко всем абзацам, которые являются подчиненными для того элемента,
у которого имеется идентификатор со значением boxout, и только в том случае, если они не являются непосредственными дочерними элементами:<br>
#boxout * p {border:1px solid green; }
</p>

<h4>Групповая селекция</h4>
<p>
При использовании CSS имеется возможность одновременного применения правила более чем к одному элементу,
классу или любому другому типу селектора путем разделения селекторов запятыми.<br>
Например, следующее правило поместит пунктирную оранжевую линию под всеми абзацами, элементом с идентификатором idname и всеми элементами,
использующими класс со значением classname:<br>
p, #idname, .classname { border-bottom:1px dotted orange; }
</p>

<h4>Каскадность CSS</h4>
<p>
Каскадирование — это метод, используемый для решения потенциальных конфликтов между различными типами стилей, поддерживаемых браузером,
и применения их в порядке приоритетности в зависимости от создателя стилей, от метода, который использован для создания стиля и от типов выбранных свойств.
</p>

<h4>Селекторы таблиц стилей</h4>
<p>
Существует три разных способа выбора стилизуемых элементов. В порядке убывания приоритетности их список имеет такой вид.<br>
1. Обращение по индивидуальному идентификатору или селектор атрибутов.<br>
2. Обращение в группах по классу.<br>
3. Обращение по тегам элементов.
</p>

<h4>Измерения</h4>
<p>
Пиксел (pixel) — его размер варьируется в соответствии с размерами и глубиной пиксела на пользовательском мониторе.
Один пиксел равен ширине и высоте отдельной точки на экране, поэтому данную единицу измерения лучше всего использовать для мониторов. Например:<br>
.classname { margin:5px; }
</p>
<p>
Пункт (point) — равен по размеру 1/72 дюйма.
Эта единица измерения пришла из полиграфии и лучше всего подходит для той среды, но также широко используется и для мониторов. Например:<br>
.classname { font-size:14pt; }
</p>
<p>
Дюйм (inch) — равен 72 пунктам и также относится к типу единиц измерения, наиболее приспособленных для организации вывода на печать. Например:<br>
.classname { width:3in; }
</p>
<p>
Сантиметр (centimeter) — еще одна единица измерения, которая наиболее пригодна для организации вывода на печать.
Один сантиметр немного превышает по размеру 28 пунктов. Например:<br>
.classname { height:2cm; }
</p>
<p>
Миллиметр (millimeter) — это 1/10 сантиметра (или почти 3 пункта).
Миллиметры являются еще одной единицей измерения, наиболее подходящей для организации вывода на печать. Например:<br>
.classname { font-size:5mm; }
</p>
<p>
Пика (pica) — еще одна типографская единица измерения, равная 12 пунктам. Например:<br>
.classname { font-size:1pc; }
</p>
<p>
Эм (em) — равен текущему размеру шрифта (ширине латинской буквы m).
Это одна из наиболее полезных единиц измерения для CSS, поскольку используется для описания относительных размеров. Например:<br>
.classname { font-size:2em; }
</p>
<p>
Экс (ex) — также относится к текущему размеру шрифта.<br>
Он равен высоте буквы x нижнего регистра. Это менее популярная единица измерения, которая чаще всего используется в качестве хорошего
приблизительного значения, помогающего установить ширину прямоугольного блока, который будет содержать некий текст. Например:<br>
.classname { width:20ex; }
</p>
<p>
Процент (percent) — эта единица сродни эму (em) и ровно в 100 раз больше (применительно к шрифту).<br>
Если 1 em эквивалентен текущему размеру шрифта, в процентах тот же размер выражается цифрой 100.
Когда эта единица не относится к шрифту, она относится к размеру того контейнера, к которому применяется данное свойство. Например:<br>
.classname { height:120%; }
</p>

<h4>Шрифты и оформление</h4>
<p>
С помощью CSS можно настроить четыре основных свойства шрифта: семейство — family, стиль — style, размер — size и насыщенность — weight.
Пользуясь этими свойствами, можно точно настроить способ отображения текста на ваших веб-страницах и (или) вывода его на печать.
</p>

<h4>font-family</h4>
<p>
Это свойство назначает используемый шрифт.<br>
Оно также поддерживает перечисление множества шрифтов в порядке предпочтения слева направо, чтобы стилевое оформление при отсутствии
у пользователя установленного предпочитаемого шрифта постепенно снижалось в сторону менее предпочитаемых шрифтов.
Например, для установки шрифта по умолчанию для абзацев можно воспользоваться следующим CSS-правилом:<br>
p { font-family:Verdana, Arial, Helvetica, sans-serif; }
</p>
<p>
Если название шрифта состоит из двух и более слов, его нужно заключить в кавычки:<br>
p { font-family:"Times New Roman", Georgia, serif; }
</p>

<h4>font-style</h4>
<p>
С помощью этого свойства можно выбрать вывод шрифта в обычном — normal, курсивном — italic или наклонном — oblique виде.<br>
Следующие правила создают три класса (normal, italic и oblique), которые могут применяться к элементам для создания соответствующих эффектов:<br>
.normal { font-style:normal; }<br>
.italic { font-style:italic; }<br>
.oblique { font-style:oblique; }
</p>

<h4>font-size</h4>
<p>
В предыдущем разделе, касающемся единиц измерения, было рассмотрено множество способов изменения размера шрифта, но все они сводятся к двум основным типам:
фиксированным и относительным. Фиксированная настройка похожа на следующее правило, которым для абзацев устанавливается размер шрифта, равный 14 пунктам:<br>
p { font-size:14pt; }
</p>

<h4>font-weight</h4>
<p>
Используя это свойство, можно задать насыщенность или степень жирности шрифта.
Оно поддерживает несколько значений, но в основном востребованы normal и bold:<br>
.bold { font-weight:bold; }
</p>

<h4>Управление стилями текста</h4>
<p>
Независимо от используемого шрифта в способ вывода текста можно внести дополнительные изменения,
меняя его оформление — decoration, разрядку — spacing и выравнивание — alignment.<br>
Но свойства текста и шрифта перекликаются в том смысле, что курсивный и полужирный текст можно получить, используя свойства font-style и font-weight,
в то время как другой текст, например подчеркнутый, требует применения свойства text-decoration.
</p>

<h4>Оформление</h4>
<p>
Используя свойство text-decoration, можно применить к тексту такие эффекты:<br> как подчеркивание — underline, перечеркивание — line-through,
верхнее подчеркивание — overline и мигание — blink.<br>
Следующее правило создает новый класс по имени over, который применяет верхнее подчеркивание к тексту
(насыщенность линий, используемых для подчеркивания снизу и сверху и для перечеркивания, будет соответствовать насыщенности шрифта):<br>
.over { text-decoration:overline; }
</p>

<h4>Разрядка</h4>
<p>
Существуют свойства, позволяющие изменить разрядку строк, слов и букв.<br>
Например, следующие правила настраивают разрядку строк для абзацев путем изменения свойства line-height, делая его на 25 % больше,
устанавливают свойство word-spacing равным 30 пикселам и разрядку букв 3 пиксела:<br>
p {<br>
line-height :125%;<br>
word-spacing :30px;<br>
letter-spacing:3px;<br>
}
</p>

<h4>Выравнивание</h4>
<p>
В CSS доступны четыре типа выравнивания текста: по левому краю — left, по правому краю — right, по центру — center и по ширине содержимого — justify.
В следующем правиле текст абзаца изначально настроен на полное выравнивание по ширине:<br>
p { text-align:justify; }
</p>

<h4>Преобразование</h4>
<p>
Для преобразования текста доступны четыре свойства:<br>
отсутствие преобразования — none, преобразование первых букв слов в заглавные — capitalize, преобразование всех букв в заглавные — uppercase
и преобразование всех букв в строчные — lowercase.
Следующее правило создает класс по имени upper, гарантирующий при его применении вывод всего текста в верхнем регистре:<br>
.upper { text-transform:uppercase; }
</p>

<h4>Отступы</h4>
<p>
С помощью свойства text-indent можно создать отступ первой строки блока текста на указанную величину.
Следующее правило создает отступ первой строки каждого абзаца на 20 пикселов, но могут быть применены и другие единицы измерения или процентное увеличение:<br>
p { text-indent:20px; }
</p>
<p>
На рис. 19.9 к блоку текста было применено следующее правило:<br>
p { line-height :150%;<br>
word-spacing :10px;<br>
letter-spacing:1px;<br>
}<br>
.justify { text-align :justify; }<br>
.uppercase { text-transform:uppercase; }<br>
.indent { text-indent :20px; }
</p>

<h4>Цвета CSS</h4>
<p>
Цвета могут применяться к первому плану, а также к фону текста и объектов путем использования свойства цвета — color и фонового цвета — background-color
(или путем предоставления единственного аргумента свойству фона — background).<br>
Указанный цвет может быть одним из именованных цветов (например, red или blue), цветом, составленным из трех шестнадцатеричных чисел RGB
(например, #ff0000 или #0000ff), или цветом, составленным с использованием CSS-функции rgb.
</p>
<p>
Названия 16 стандартных цветов, определенных организацией по стандартам W3C (http://www.w3.org), следующие:<br>
аквамарин — aqua,<br> черный — black,<br> синий — blue,<br> яркий пурпурно-красный, или фуксия, — fuchsia,<br> серый — gray,<br>
зеленый — green,<br> яркий светло-зеленый — lime,<br> красно-коричневый — maroon,<br> темно-синий — navy,<br> оливковый — olive,<br>
фиолетовый — purple,<br> красный — red,<br> серебристый — silver,<br> зеленовато-голубой — teal,<br> белый — white<br> и желтый — yellow.
</p>
<p>
Следующее правило использует одно из этих названий для установки фонового цвета для объекта с ID, имеющим значение object:<br>
#object { background-color:silver; }
</p>
<p>
В показанном ниже правиле фоновый цвет текста во всех div>-элементах установлен желтым
(поскольку на мониторе шестнадцатеричные уровни ff красного плюс ff зеленого плюс 00 синего составляют желтый цвет):<br>
div { color:#ffff00; }
</p>
<p>
Или, если не хочется работать с шестнадцатеричными числами, можно указать свои три цветовые составляющие с помощью функции rgb,
как в следующем правиле, которое изменяет фоновый цвет текущего документа на аквамарин:<br>
body { background-color:rgb(0, 255, 255); }
</p>
<p>
Если вы не хотите работать в диапазоне 256 уровней для каждого основного цвета, можете вместо них в функции rgb использовать процентный показатель
со значениями от 0 до 100 в диапазоне от самого низкого (0) количества до самого высокого (100) основного цвета, например: rgb(58%, 95%, 74%).<br>
Можно также для более тонкого управления цветом применять числа с плавающей точкой, например: rgb(23.4%, 67.6%, 15.5%).
</p>

<h4>Градиенты</h4>
<p>
Вместо использования сплошного цветового фона можно применить градиент, который будет автоматически переходить
от выбранного исходного цвета к выбранному конечному цвету.
Градиент лучше использовать в связке с простым цветовым правилом, чтобы браузеры, не поддерживающие градиенты, отображали хотя бы сплошной цвет.
</p>
<p>
В примере 19.3 задействуется правило отображения оранжевого градиента (или просто обычного оранжевого цвета в браузерах, не поддерживающих градиенты),
как показано в средней части рис. 19.10.
</p>
<p>Пример 19.3. Создание линейного градиента</p>
<p>
.orangegrad {<br>
background:orange;<br>
background:linear-gradient(top, #fb0, #f50);<br>
background:-moz-linear-gradient(top, #fb0, #f50);<br>
background:-webkit-linear-gradient(top, #fb0, #f50);<br>
background:-o-linear-gradient(top, #fb0, #f50);<br>
background:-ms-linear-gradient(top, #fb0, #f50); }<br>
<br>
div class='orangegrad'>Черный текст br><br>
на оранжевом <br>линейном градиенте /div><br>
</p>
<p style='color: blue;'>Start code</p>
<div class='orangegrad'>Черный текст <br>на оранжевом <br>линейном градиенте</div>
<p>
Для создания градиента нужно выбрать, где он будет начинаться: вверху (top), внизу (bottom), слева (left), справа (right), по центру (center)
или в любых составных местах, например в левом верхнем углу (top left) или от центра вправо (center right).
</p>
<p>
Затем следует ввести нужные начальный и конечный цвета и применить правило либо линейного (linear-gradient), либо радиального (radial-gradient) градиента,
обеспечив правила для всех браузеров, на которые вы нацелились.
</p>
<p>
Вы также можете не только использовать начальный и конечный цвета, но и указывать между ними в качестве дополнительных аргументов составляющие конечные цвета.
Например, если указаны пять аргументов, каждый из них будет управлять изменением цвета одной пятой области (в соответствии с его местом в списке аргументов).
</p>
<p>
Как показано в предыдущем примере, многие CSS-правила требуют префиксов, которые предназначены для того или иного браузера,
например -moz-, -webkit-, -o- и -ms- (соответственно для браузеров на основе движка Mozilla, таких как Firefox, для браузеров на основе движка WebKit,
таких как Apple Safari, Google Chrome и браузеров iOS Android, а также для браузеров Opera и Microsoft).<br>
Основные CSS-правила и атрибуты, а также указания на то, где требуются версии, подстроенные под тот или иной браузер, перечислены на сайте http://caniuse.com.
</p>

<h4>Позиционирование элементов</h4>
<p>
Элементы попадают на веб-страницу туда, где они находятся в документе, но могут перемещаться путем изменения свойства позиции элемента
от исходной статической до абсолютной, относительной или фиксированной.
</p>

<h4>Абсолютное позиционирование</h4>
<p>
Элемент с абсолютным позиционированием удаляется из документа, и любые другие элементы, которые в состоянии это сделать, займут освободившееся пространство.<br>
Затем вы можете переместить объект в любое нужное место в документе, используя свойства
«верх» — top, «право» — right, «низ» — bottom и «лево» — left. Он останется над (или под) другими элементами.
</p>
<p>
Например, для перемещения объекта с ID, имеющим значение object, в абсолютное место, находящееся на 100 пикселов ниже начала документа
и отстоящее на 200 пикселов от левого края, к нему нужно применить следующие правила
(вы также можете использовать любые другие единицы измерения, поддерживаемые CSS):<br>
#object {<br>
position:absolute;<br>
top :100px;<br>
left :200px;<br>
}
</p>

<h4>Относительное позиционирование</h4>
<p>
Подобным образом можно переместить объект относительно того места, которое он занимал бы при обычном ходе формирования документа.
Так, например, для перемещения объекта на 10 пикселов вниз и 10 пикселов вправо от его обычного положения нужно воспользоваться следующими правилами:<br>
#object {<br>
position:relative;<br>
top :10px;<br>
left :10px;<br>
}
</p>

<h4>Фиксированное позиционирование</h4>
<p>
Заключительные настройки свойства позиционирования позволяют поместить объект в абсолютное положение, но только внутри окна просмотра текущего браузера.<br>
При прокрутке документа объект остается именно там, куда он был помещен, а основной документ будет прокручиваться под ним —
это неплохой способ создания док-панелей и других подобных устройств.
Для фиксирования объекта в левом верхнем углу браузера нужно воспользоваться следующими правилами:<br>
#object {<br>
position:fixed;<br>
top :0px;<br>
left :0px;<br>
}
</p>
<p>
На рис. 19.11 код примера 19.4 был загружен в браузер и окно браузера было уменьшено по ширине и высоте.
В результате появилась необходимость в прокрутке вниз, чтобы можно было увидеть всю веб-страницу.<br>
Когда все это будет сделано, тут же станет очевидно, что элемент с фиксированным позиционированием остается на месте даже при прокрутке страницы.
Вы также можете заметить, что элемент с абсолютным позиционированием расположен точно на 100 пикселов ниже с нулевым горизонтальным смещением, а элемент
с относительным позиционированием фактически переместился вверх на 8 пикселов, а затем сместился от левого края на 110 пикселов,
чтобы выстроиться в линию рядом с первым элементом.
</p>
<p>Пример 19.4. Применение разных значений позиционирования</p>
<p>
#object1 {<br>
position :absolute;<br>
background:pink;<br>
width :100px;<br>
height :100px;<br>
top :100px;<br>
left :0px;<br>
}<br>
<br>
#object2 {<br>
position :relative;<br>
background:lightgreen;<br>
width :100px;<br>
height :100px;<br>
top :-8px;<br>
left :110px;<br>
}<br>
<br>
#object3 {<br>
position :fixed;<br>
background:yellow;<br>
width :100px;<br>
height :100px;<br>
top :100px;<br>
left :236px;<br>
}<br>
div id='object1'>Абсолютное позиционирование/div><br>
div id='object2'>Относительное позиционирование/div><br>
div id='object3'>Фиксированное позиционирование/div>
</p>

<p style='color: blue;'>Start code</p>
<div id='object1'>Абсолютное позиционирование</div>
<div id='object2'>Относительное позиционирование</div>
<div id='object3'>Фиксированное позиционирование</div>

<h4>Псевдоклассы</h4>
<p>
Существуют селекторы и классы, используемые только внутри таблиц стилей и не имеющие каких-либо соответствующих тегов или атрибутов в HTML.<br>
Их задача заключается в том, чтобы классифицировать элементы, используя характеристики, отличные от их имен, атрибутов или содержимого,
то есть характеристики, которые не могут быть прослежены по дереву документа.<br>
К их числу относятся такие псевдоклассы, как link и visited.
Существуют также псевдоэлементы, с помощью которых осуществляется выбор и которые могут состоять из отдельных элементов,
таких как первая строка — first-line или первая буква — first-letter.
</p>
<p>
Псевдоклассы и псевдоэлементы отделяются с помощью двоеточия (:).<br>
Например, для создания класса по имени bigfirst для выделения первой буквы элемента можно воспользоваться таким правилом:<br>
.bigfirst:first-letter {<br>
font-size:400%;<br>
float :left; }<br>
<br>
div class='bigfirst'>Какой-то очень длинный текст/div>
</p>
<p style='color: blue;'>Start code</p>
<div class='bigfirst'>
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
Какой-то очень длинный текст
</div>
<p>
Когда класс bigfirst применится к элементу, первая буква будет отображаться сильно увеличенной, а остальной текст будет показан в обычном размере,
аккуратно ее обтекая (благодаря свойству float), как будто первая буква является изображением или другим объектом.
</p>
<p>
В число псевдоклассов входят hover, link, active и visited.<br>
Все они наиболее полезны применительно к anchor-элементам, как показано в следующих правилах, которые устанавливают
для ссылок в качестве исходного синий цвет, а для посещенных ссылок — светло-синий цвет:<br>
a:link { color:blue; }<br>
a:visited { color:lightblue; }
</p>
<p>
Следующие правила интересны тем, что в них используется псевдокласс hover, поэтому они применяются только при нахождении указателя мыши над элементом.<br>
В этом примере они изменяют в ссылке цвет текста на белый на красном фоне, предоставляя динамический эффект,
которого можно было бы ожидать только от использования кода JavaScript:<br>
a:hover {<br>
color :white;<br>
background:red;<br>
}<br><br>
Здесь вместо более длинного свойства цвета фона background-color я использовал свойство фона background с единственным аргументом.
</p>
<p>
Псевдокласс active также имеет динамический характер, выражающийся в том, что он влияет на изменение ссылки в промежутке времени между щелчком кнопкой мыши
и освобождением этой кнопки, как в следующем правиле, изменяющем цвет ссылки на темно-синий:<br>
a:active { color:darkblue; }
</p>
<p>
Еще одним интересным динамическим псевдоклассом является focus, который применяется, только когда элемент получает фокус путем выбора
его пользователем с помощью клавиатуры или мыши.<br>
Следующее правило применяет универсальный селектор, чтобы всегда помещать светло-серую пунктирную границу толщиной 2 пиксела вокруг объекта, имеющего фокус:<br>
*:focus { border:2px dotted #888888; }
</p>
<p>
Как показано на рис. 19.12, код примера 19.5 выводит две ссылки и поле ввода.<br>
Первая ссылка показана серым цветом, поскольку она уже посещалась в этом браузере, а вторая ссылка еще не посещалась и показана синим цветом.<br>
Была нажата клавиша Tab, и фокусом ввода теперь служит поле ввода, поэтому цвет его фона поменялся на желтый.<br>
Когда будет щелчок кнопкой мыши на любой из ссылок, она отобразится фиолетовым цветом, а когда над ней будет проходить указатель мыши,
она будет показана красным цветом.
</p>
<p>Пример 19.5. Псевдоклассы link и focus</p>
<p>
head><br>
title>Псевдоклассы/title><br>
style><br>
a:link { color:blue; }<br>
a:visited { color:gray; }<br>
a:hover { color:red; }<br>
a:active { color:purple; }<br>
*:focus { background:yellow; }<br>
/style><br>
/head><br>
body><br>
p>Для перемещения фокуса по элементам нажимайте<br>
клавишу Tab (и Shift+Tab)/p> br> br><br>
a href='http://google.com'>Ссылка на Google'/a>br><br>
a href='nowhere'>Ссылка в никуда'/a>br><br>
input type='text'>
</p>

<p style='color: blue;'>Start code</p>
<p>Для перемещения фокуса по элементам нажимайте
клавишу Tab (и Shift+Tab)</p> <br> <br>
<a href='http://google.com'>Ссылка на Google'</a><br>
<a href='nowhere'>Ссылка в никуда'</a><br>
<input type='text'>

<h4>Сокращенная запись правил</h4>
<p>
Для экономии пространства группы родственных CSS-свойств могут объединяться в простую сокращенную запись.
Например, я уже несколько раз использовал сокращение для создания границы, как в правиле focus в предыдущем разделе:<br>
*:focus { border:2px dotted #ff8800; }
</p>
<p>
На самом деле это сокращенное объединение такого набора правил:<br>
*:focus {<br>
border-width:2px;<br>
border-style:dotted;<br>
border-color:#ff8800;<br> }
</p>
<p>
При использовании сокращенной записи правила нужно лишь применить свойства к тому пункту, у которого следует изменить значения.
Для установки только ширины и стиля границы без изменения ее цвета можно также использовать следующее правило:<br>
*:focus { border:2px dotted; }
</p>

<h4>Модель блока и макет страницы</h4>
<p>
Свойства CSS, влияющие на макет страницы, основаны на модели блока, вложенном наборе свойств, окружающем элемент.<br>
Фактически такие свойства есть (или могут быть) у всех элементов, включая тело документа, чье поле вы можете (к примеру)
удалить с помощью следующего правила:<br>
body { margin:0px; }
</p>
<p>
Модель блока объекта начинается снаружи, с поля объекта.
Внутри него находится граница, затем следует отступ содержимого от границы. И наконец, идет содержимое объекта.
</p>

<h4>Установка полей</h4>
<p>
Поле является самым крайним уровнем модели блока. Оно отделяет элементы друг от друга и требует разумного использования.<br>
Предположим, к примеру, что вы решили выбрать по умолчанию поле в 10 пикселов вокруг каждого из нескольких элементов.
Если расположить их друг над другом, то в результате сложения полей между ними получится разрыв в 20 пикселов.
</p>
<p>
Но CSS устраняют эту потенциальную проблему: когда два элемента с полями позиционируются непосредственно один над другим,
для отделения их друг от друга используется только самое большое из двух полей. Если оба поля имеют одинаковую ширину, применяется только одна ширина.
Благодаря этому вы, скорее всего, добьетесь желаемого результата.<br>
Но при этом имейте в виду, что поля элементов с заданным абсолютным позиционированием или встраиваемых элементов не подвергаются поглощению другими полями.
</p>
<p>
Поля элемента могут быть изменены целиком с помощью свойства margin или отдельно друг от друга с помощью свойств:<br>
margin-left, margin-top, margin-right и margin-bottom.<br>
При установке свойства margin можно указать один, два, три или четыре аргумента, в результате чего получится эффект,
прокомментированный в следующих правилах:<br>
</p>
<p>
/* Установка всех полей шириной 1 пиксел */<br>
margin:1px;<br><br>
/* Установка верхнего и нижнего полей шириной 1 пиксел,
а левого и правого — 2 пиксела */<br>
margin:1px 2px;<br><br>
/* Установка верхнего поля шириной 1 пиксел, левого и правого — 2 пиксела
и нижнего — 3 пиксела */<br>
margin:1px 2px 3px;<br><br>
/* Установка верхнего поля шириной 1 пиксел, правого — 2, нижнего — 3
и левого — 4 пиксела */<br>
margin:1px 2px 3px 4px;
</p>
<p>
На рис. 19.13 показан код примера 19.6, загруженный в браузер, где правило свойства margin (выделенное в коде полужирным шрифтом)
применяется к прямоугольным элементам, помещенным внутри элемента table>. <br>
Размер таблицы не задан, поэтому она будет просто охватывать как можно плотнее внутренний div>-элемент.<br>
Вследствие этого сверху будет поле шириной 10 пикселов, справа — поле шириной 20 пикселов, снизу — поле шириной 30 пикселов и слева — поле шириной 40 пикселов.
</p>
<p>Пример 19.6. Порядок применения полей</p>
<p>
title>Поля/title><br>
style><br>
#object1 {<br>
background :lightgreen;<br>
border-style:solid;<br>
border-width:1px;<br>
font-family :Courier New;<br>
font-size :9px;<br>
width :100px;<br>
height :100px;<br>
padding :5px;<br>
margin :10px 20px 30px 40px;<br>
}<br><br>
table #vvedenie {<br>
padding :0;<br>
border :1px solid black;<br>
background :cyan;<br>
}<br>
/style><br><br>
/head><br>
body><br>
table id='vvedenie'><br>
tr><br>
td><br>
div id='object11'>margin:br>10px 20px 30px 40px;/div><br>
/td><br>
/tr><br>
/table>
</p>

<p style='color: blue;'>Start code</p>
<table id='vvedenie'>
	<tr>
		<td>
			<div id='object11'>margin:<br>10px 20px 30px 40px;</div>
		</td>
	</tr>
</table>



<h4>Применение границ</h4>
<p>
Уровень границ модели блока похож на уровень полей, за исключением того, что здесь отсутствует поглощение.
Это следующий уровень по мере продвижения к центру модели блока.<br>
Основными свойствами, используемыми для изменения границ, являются border, border-left, border-top, border-right и border-bottom.<br>
Каждое из них может иметь другие подсвойства, добавляемые в виде суффиксов, например -color, -style и -width.
</p>
<p>
Четыре способа установки отдельных свойств, которые использовались для свойства margin, применимы и для свойства ширины границы — border-width,
поэтому все следующие правила составлены верно:
</p>
<p>
/* Все границы */<br>
border-width:1px;<br><br>
/* Верхняя/нижняя и левая/правая */<br>
border-width:1px 5px;<br><br>
/* Верхняя, левая/правая и нижняя */<br>
border-width:1px 5px 10px;<br><br>
/* Верхняя, правая, нижняя и левая */<br>
border-width:1px 5px 10px 15px;
</p>

<h4>Настройка отступов</h4>
<p>
Самыми глубокими уровнями модели блока (отличающимися от содержимого элемента) являются отступы, применяемые внутри любых границ и (или) полей.
Основными свойствами, используемыми для изменения отступов, являются padding, padding-left, padding-top, padding-right и padding-bottom.
</p>
<p>
Те четыре способа установки отдельных свойств, которые задействовались для свойств margin и border, применимы и для свойства отступа — padding,
поэтому все следующие правила составлены верно:
</p>
<p>
/* Все отступы */<br>
padding:1px;<br><br>
/* Верхний/нижний и левый/правый */<br>
padding:1px 2px;<br><br>
/* Верхний, левый/правый и нижный */<br>
padding:1px 2px 3px;<br><br>
/* Верхний, правый, нижний и левый */<br>
padding:1px 2px 3px 4px;
</p>
<p>

</p>

<h4></h4>
<p>

</p>

<h4></h4>
<p>

</p>

<h4></h4>
<p>

</p>

<h4></h4>
<p>

</p>


<p></p>
<p>

</p>

<p style='color: blue;'>Start code</p>
<script>

</script>
<p>

</p>
<p>

</p>


<h4></h4>
<p>

</p>
<p></p>
<p>

</p>

<p style='color: blue;'>Start code</p>
<script>

</script>
<p>

</p>
<p>

</p>

<h4></h4>
<p>

</p>
<p></p>
<p>

</p>

<p style='color: blue;'>Start code</p>
<script>

</script>
<p>

</p>
<p>

</p>


<h4></h4>
<p>

</p>
<p></p>
<p>

</p>

<p style='color: blue;'>Start code</p>
<script>

</script>
<p>

</p>
<p>

</p>

<h4></h4>
<p>

</p>
<p></p>
<p>

</p>

<p style='color: blue;'>Start code</p>
<script>

</script>
<p>

</p>
<p>

</p>


<h4></h4>
<p>

</p>
<p></p>
<p>

</p>

<p style='color: blue;'>Start code</p>
<script>

</script>
<p>

</p>
<p>

</p>

<h4></h4>
<p>

</p>
<p></p>
<p>

</p>

<p style='color: blue;'>Start code</p>
<script>

</script>
<p>

</p>
<p>

</p>


<h4></h4>
<p>

</p>
<p></p>
<p>

</p>

<p style='color: blue;'>Start code</p>
<script>

</script>
<p>

</p>
<p>

</p>

<h4></h4>
<p>

</p>
<p></p>
<p>

</p>

<p style='color: blue;'>Start code</p>
<script>

</script>
<p>

</p>
<p>

</p>


<h4></h4>
<p>

</p>
<p></p>
<p>

</p>

<p style='color: blue;'>Start code</p>
<script>

</script>
<p>

</p>
<p>

</p>

<h4></h4>
<p>

</p>
<p></p>
<p>

</p>

<p style='color: blue;'>Start code</p>
<script>

</script>
<p>

</p>
<p>

</p>


<h4></h4>
<p>

</p>
<p></p>
<p>

</p>

<p style='color: blue;'>Start code</p>
<script>

</script>
<p>

</p>
<p>

</p>

		<p align="center">
		<a onclick="javascript: history.back(); return falshe;"><img src="../images/esc2.png" id="send"/></a>
		<a href="#top" title="Наверх"><img src="../images/buttonUpActive.png"/></a>
		</p>
		
	</body>
</html>