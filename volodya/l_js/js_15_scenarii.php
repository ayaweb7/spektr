<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link href="../css/screen.css" type="text/css" rel="stylesheet" />
<link rel="shortcut icon" type="image/ico" href="images/favicon.ico" />

<title>Сценарии JavaScript</title>
</head>

	<body name="top">
<!-- !!!!!!!!!!!!!!!!!       шаблоны, заготовки для тэгов, комментарии !!!!!!!!!!!!!!! -->

<!-- Абзацы, заголовки, комментарии -->
<h4></h4>
<p>

</br>
</p>
<p></p>
<!-- Это комментарий HTML -->

<?php  ?>

<?php
/* 
Это область
многострочного комментария,
которая не будет
подвергаться интерпретации 
*/
?>

<!-- Шаблон для PHP кода с комментариями внутри кода -->
<h4></h4>
<p>

</br>
</p>
<p></p>
<?php
// 


// 

?>

<table id="inventory" class="realty">
	<tr><th></th><th></th><th></th></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
</table>


<!-- !!!!!!!!!!!!!!!!!       шаблоны, заготовки для тэгов, комментарии !!!!!!!!!!!!!!! -->

<h4>Выражения</h4>
<p>Пример 15.1. Четыре примера булевых выражений</p>
<p>
document.write("a: " + (42 > 3) + "br>")<br>
document.write("b: " + (91 < 4) + "br>")<br>
document.write("c: " + (8 == 2) + "br>")<br>
document.write("d: " + (4 < 17) + "br>")
</p>
<p style='color: blue;'>Start code</p>
<script>
document.write("a: " + (42 > 3) + "<br>")
document.write("b: " + (91 < 4) + "<br>")
document.write("c: " + (8 == 2) + "<br>")
document.write("d: " + (4 < 17) + "<br>")
</script>

<h4>Литералы и переменные</h4>
<p>
Простейшей формой выражения является литерал, означающий нечто, вычисляемое само в себя, например число 22 или строка «Нажмите клавишу Enter».<br>
Выражение может также быть переменной, которая вычисляется в присвоенное ей значение.<br>
И литералы, и переменные относятся к типам выражений, поскольку они возвращают значение.
</p>
<p>Пример 15.2. Пять типов литералов</p>
<p>
myname = "Peter"<br>
myage = 24<br>
document.write("a: " + 42 + "br>") // Числовой литерал<br>
document.write("b: " + "Hi" + "br>") // Строковый литерал<br>
document.write("c: " + true + "br>") // Литерал константы<br>
document.write("d: " + myname + "br>") // Литерал строковой переменной<br>
document.write("e: " + myage + "br>") // Литерал числовой переменной<br>
</p>
<p style='color: blue;'>Start code</p>
<script>
myname = "Peter"
myage = 24
document.write("a: " + 42 + ": Числовой литерал" + "<br>") // Числовой литерал
document.write("b: " + "Hi" + ": Строковый литерал" +  "<br>") // Строковый литерал
document.write("c: " + true + ": Литерал константы" +  "<br>") // Литерал константы
document.write("d: " + myname + ": Литерал строковой переменной" +  "<br>") // Литерал строковой переменной
document.write("e: " + myage + ": Литерал числовой переменной" +  "<br>") // Литерал числовой переменной
</script>

<h4>Инструкция with</h4>
<p>
Используя эту инструкцию, можно упростить некоторые типы инструкций JavaScript, сократив множество ссылок на объект до всего одной ссылки.<br>
Предполагается, что ссылки на свойства и методы внутри блока with должны применяться к указанному объекту.
</p>
<p>
Рассмотрим код примера 15.10, в котором функция document.write нигде не ссылается на переменную string по имени.<br>
Пример 15.10. Использование инструкции with
</p>
<p>
string = "Шустрая бурая лисица перепрыгивает через ленивую собаку"<br>
with (string)<br>
{<br>
document.write("В строке " + length + " символов br>")<br>
document.write("В верхнем регистре: " + toUpperCase())<br>
}
</p>
<p style='color: blue;'>Start code</p>
<script>
string = "Шустрая бурая лисица перепрыгивает через ленивую собаку"
with (string)
{
document.write("В строке " + length + " символов <br>")
document.write("В верхнем регистре: " + toUpperCase())
}
</script>
<p>
Код примера работает следующим образом:<br> интерпретатор JavaScript распознает, что свойство length и метод toUpperCase()
должны быть применены к какому-то объекту.<br>
Поскольку они указаны только сами по себе, интерпретатор предполагает, что они применяются к объекту string, указанному в инструкции with.
</p>

<h4>Использование события onerror</h4>
<p>
Рассмотрим еще одну конструкцию, недоступную в PHP.<br>
Используя либо событие onerror, либо сочетание ключевых слов try и catch, можно перехватить ошибки JavaScript и самостоятельно справиться с ними.<br>
Событиями называются действия, которые могут быть обнаружены JavaScript.<br>
Каждый элемент на веб-странице имеет конкретные события, которыми могут быть приведены в действие функции JavaScript.
</p>
<p>Пример 15.11. Сценарий, использующий событие onerror</p>
<p>
onerror = errorHandler<br>
document.writ("Добро пожаловать на этот сайт!") // Преднамеренная ошибка<br>
function errorHandler(message, url, line)<br>
{<br>
out = "К сожалению, обнаружена ошибка.\n\n";<br>
out += "Ошибка: " + message + "\n";<br>
out += "URL: " + url + "\n";<br>
out += "Строка: " + line + "\n\n";<br>
out += "Щелкните на кнопке OK для продолжения работы.\n\n";<br>
alert(out);<br>
return true;<br>
}
</p>
<p style='color: blue;'>Start code</p>
<script>
onerror = errorHandler
document.write("Добро пожаловать на этот сайт!") // Преднамеренная ошибка
function errorHandler(message, url, line)
{
out = "К сожалению, обнаружена ошибка.\n\n";
out += "Ошибка: " + message + "\n";
out += "URL: " + url + "\n";
out += "Строка: " + line + "\n\n";
out += "Щелкните на кнопке OK для продолжения работы.\n\n";
alert(out);
return true;
}
</script>
<p>
В первой строке сценария событию ошибки предписывается впредь использовать новую функцию errorHandler.<br>
Эта функция принимает три параметра — сообщение, URL-адрес и номер строки, поэтому остается лишь отобразить все это в появляющемся окне метода alert.
</p>

<h4>Конструкция try...catch</h4>
<p>
Технология, в которой применяются ключевые слова try и catch, считается более стандартной и гибкой, чем обработка события onerror.<br>
Эти ключевые слова позволяют перехватывать ошибки для избранного раздела кода, а не для всех сценариев, имеющихся в документе.
Но данная технология не позволяет перехватывать синтаксические ошибки, для чего приходится применять обработку события onerror.
</p>
<p>
Конструкция try...catch поддерживается всеми основными браузерами и задействуется в тех случаях,
когда нужно перехватить управление при наступлении конкретных условий, о которых известно то, что они могут сложиться в определенной части вашего кода.
</p>
<p>Пример 15.12. Перехват ошибки с помощью ключевых слов try и catch</p>
<p>
try<br>
{<br>
request = new XMLHTTPRequest()<br>
}<br>
catch(err)<br>
{<br>
// Использование другого метода для создания запроса<br>
// XML HTTP Request object<br>
}
</p>

<h4>Условия</h4>
<p>
Условия изменяют процесс выполнения программы. Они позволяют задавать конкретные вопросы и по-разному реагировать на полученные ответы.<br>
Существуют три типа условий, не связанных с циклами: инструкция if, инструкция switch и оператор ?.
</p>
<p>Инструкция if</p>
<p>
Код внутри этой инструкции выполняется только в том случае, если заданное выражение вычисляется как true.
Многострочные инструкции if заключаются в фигурные скобки, но, как и в PHP, для однострочных инструкций скобки можно опустить.
</p>
<p>
if (a > 100)<br>
{<br>
b=2<br>
document.write("a больше 100")<br>
}<br><br>
if (b == 10) document.write("b равно 10")
</p>

<p>Инструкция else</p>
<p>
Если условие не было соблюдено, то с помощью инструкции else может быть выполнен альтернативный блок кода:<br>
if (a > 100)<br>
{<br>
document.write("a больше 100")<br>
}<br>
else<br>
{<br>
document.write("a меньше или равно 100")<br>
}
</p>

<p>
В JavaScript, в отличие от PHP, нет инструкции elseif, но ее отсутствие компенсируется возможностью использования инструкции else,
за которой следует еще одна инструкция if, чем создается эквивалент инструкции elseif:<br>
if (a > 100)<br>
{<br>
document.write("a больше 100")<br>
}<br>
else if(a < 100)<br>
{<br>
document.write("a меньше 100")<br>
}<br>
else<br>
{<br>
document.write("a равно 100")<br>
}
</p>

<p>Инструкция switch</p>
<p>
Инструкция switch применяется в том случае, когда одиночная переменная или результат вычисления выражения может иметь несколько значений,
для каждого из которых нужно применить свою функцию.<br>
Код, созданный для этого с помощью конструкции if...else if..., может иметь вид, показанный в примере 15.13.<br>
Пример 15.13. Многострочная конструкция if...else if
</p>
<p>
if (page == "Home") document.write("Вы выбрали Home")<br>
else if (page == "About") document.write("Вы выбрали About")<br>
else if (page == "News") document.write("Вы выбрали News")<br>
else if (page == "Login") document.write("Вы выбрали Login")<br>
else if (page == "Links") document.write("Вы выбрали Links")
</p>

<p>
А при использовании конструкции switch код может иметь вид, показанный в примере 15.14.<br>
Пример 15.14. Конструкция switch
</p>
<p>
switch (page)<br>
{<br>
case "Home":<br>
document.write("Вы выбрали Home")<br>
break<br>
case "About":<br>
document.write("Вы выбрали About")<br>
break<br>
case "News":<br>
document.write("Вы выбрали News")<br>
break<br>
case "Login":<br>
document.write("Вы выбрали Login")<br>
break<br>
case "Links":<br>
document.write("Вы выбрали Links")<br>
break<br>
}
</p>

<p>Действие по умолчанию</p>
<p>
С помощью ключевого слова default для инструкции switch можно определить действие по умолчанию на тот случай,
когда не будет выполнено ни одно из условий. В примере 15.15 показан фрагмент кода, который может быть вставлен в код примера 15.14.<br>
Пример 15.15. Инструкция default, предназначенная для кода примера 15.14<br>
default:<br>
document.write("Нераспознанный выбор")<br>
break
</p>

<p>Оператор «?»</p>
<p>
Трехкомпонентный оператор, состоящий из вопросительного знака (?), применяемого в сочетании с символом двоеточия (:),
является упрощенной формой теста if...else.<br>
Используя этот оператор, можно поставить за вычисляемым выражением знак ? и код, выполняемый в том случае, если выражение вычисляется как true.
После этого кода ставится знак : и код, который будет выполнен, если выражение будет вычислено как false.
</p>
<p>Пример 15.16. Использование трехкомпонентного оператора</p>
<p>
document.write(<br>
a <= 5 ?<br>
"a меньше или равно 5" :<br>
"a больше 5"<br>
)
</p>
<p>
Для более понятного представления этот оператор был разбит на несколько строк, но вы, скорее всего, воспользуетесь его однострочной формой:<br>
size = a <= 5 ? "короткий" : "длинный"
</p>

<h4>Циклы</h4>
<p>
При рассмотрении циклов нам опять встретится множество параллелей между JavaScript и PHP.
В обоих языках поддерживаются циклы while, do...while и for.
</p>
<p>Циклы while</p>
<p>
В JavaScript в циклах while сначала проверяется значение выражения, а выполнение инструкций внутри цикла начинается лишь в том случае,
если выражение вычисляется как true.
Если выражение вычисляется как false, управление переходит к следующей инструкции JavaScript (если таковая имеется).
</p>
<p>
counter=0<br>
while (counter < 5)<br>
{<br>
document.write("Счетчик: " + counter + "br>")<br>
++counter<br>
}
</p>
<p style='color: blue;'>Start code</p>
<script>
counter=0
while (counter < 5)
{
document.write("Счетчик: " + counter + "<br>")
++counter
}
</script>

<p>Циклы do...while</p>
<p>
Когда нужен цикл, в котором еще до того, как будет проверено выражение, должна пройти хотя бы одна итерация,
используется цикл do...while, который похож на цикл while, за исключением того, что проверка выражения осуществляется только после каждой итерации цикла.
</p>
<p>Пример 15.18. Цикл do...while</p>
<p>
count = 1<br>
do<br>
{<br>
document.write(count + " умножить на 7 равно " + count * 7 + "br>")<br>
} while (++count <= 7)
</p>

<p style='color: blue;'>Start code</p>
<script>
count = 1
do
{
document.write(count + " умножить на 7 равно " + count * 7 + "<br>")
} while (++count <= 7)
</script>

<p>Циклы for</p>
<p>
Цикл for объединяет все лучшие качества организации цикла в одной конструкции, которая позволяет передать каждой инструкции три параметра:<br>
- выражение инициализации;<br>
- выражение условия;<br>
- выражение модификации.<br><br>
Эти параметры отделяются друг от друга точками с запятыми: for (выражение1; выражение2; выражение3).
</p>
<p>Пример 15.19. Использование цикла for</p>
<p>
for (count = 1 ; count <= 7 ; ++count)<br>
{<br>
document.write(count + " умножить на 7 равно " + count * 7 + "br>");<br>
}
</p>

<p style='color: blue;'>Start code</p>
<script>
for (count = 1 ; count <= 7 ; ++count)
{
document.write(count + " умножить на 7 равно " + count * 7 + "<br>");
}
</script>

<p>
Как и в PHP, в первом параметре цикла for можно присваивать значения сразу нескольким переменным, разделяя выражения запятыми:<br>
for (i = 1, j = 1 ; i < 10 ; i++)<br><br>
Точно так же в последнем параметре можно осуществлять сразу несколько модификаций:<br>
for (i = 1 ; i < 10 ; i++, --j)<br><br>
Или можно одновременно делать и то и другое:<br>
for (i = 1, j = 1 ; i < 10 ; i++, --j)
</p>

<h4>Прекращение работы цикла</h4>
<p>
Команду break, о важности использования которой в инструкции switch вы уже знаете, можно применять и внутри циклов for.
Например, она может пригодиться при поиске совпадений определенного вида.
Как только совпадение будет найдено, продолжение поиска станет пустой тратой времени и заставит вашего посетителя ждать его завершения.
</p>
<p>Пример 15.20. Использование команды break в цикле for</p>
<p>
haystack = new Array()<br>
haystack[17] = "Иголка"<br>
for (j = 0 ; j < 20 ; ++j)<br>
{<br>
if (haystack[j] == "Иголка")<br>
{<br>
document.write("br>- найдена в элементе " + j)<br>
break<br>
}<br>
else document.write(j + ", ")<br>
}
</p>

<p style='color: blue;'>Start code</p>
<script>
haystack = new Array()
haystack[17] = "Иголка"
for (j = 0 ; j < 20 ; ++j)
{
if (haystack[j] == "Иголка")
{
document.write("<br>- найдена в элементе " + j)
break
}
else document.write(j + ", ")
}
</script>

<h4>Инструкция continue</h4>
<p>
Иногда нужно не выйти из цикла, а пропустить выполнение тех инструкций, которые остались в данной итерации.
В таких случаях можно воспользоваться командой continue.
</p>
<p>Пример 15.21. Использование команды continue в цикле for</p>
<p>
haystack = new Array()<br>
haystack[4] = "Иголка"<br>
haystack[11] = "Иголка"<br>
haystack[17] = "Иголка"<br>
for (j = 0 ; j < 20 ; ++j)<br>
{<br>
if (haystack[j] == "Иголка")<br>
{<br>
document.write("<br>- найдена в элементе " + j + "br>")<br>
continue<br>
}<br>
document.write(j + ", ")<br>
}
</p>

<p style='color: blue;'>Start code</p>
<script>
haystack = new Array()
haystack[4] = "Иголка"
haystack[11] = "Иголка"
haystack[17] = "Иголка"
for (j = 0 ; j < 20 ; ++j)
{
if (haystack[j] == "Иголка")
{
document.write("<br>- найдена в элементе " + j + "<br>")
continue
}
document.write(j + ", ")
}
</script>
<p>
Обратите внимание на то, что второй вызов метода document.write не нужно помещать в инструкцию else (как было в предыдущем примере),
поскольку, если будет найдено совпадение, то в результате выполнения команды continue данный вызов будет пропущен.
</p>

<h4>Явное преобразование типов</h4>
<p>
В отличие от PHP, в JavaScript нет явного преобразования типов, осуществляемого с помощью операторов (int) или (float).<br>
Когда нужно, чтобы значение имело определенный тип данных, используется одна из встроенных функций JavaScript, показанных в табл. 15.6.
</p>
<p>Таблица 15.6. Функции изменения типа, используемые в JavaScript</p>
<table id="inventory" class="realty">
	<tr><th>Преобразование в тип данных</th><th>Используемая функция</th></tr>
	<tr><td>Int, Integer</td><td>parseInt()</td></tr>
	<tr><td>Bool, Boolean</td><td>Boolean()</td></tr>
	<tr><td>Float, Double, Real</td><td>parseFloat()</td></tr>
	<tr><td>String</td><td>String()</td></tr>
	<tr><td>Array</td><td>split()</td></tr>
</table>

<p>
Например, чтобы преобразовать число с плавающей точкой в целое число, можно использовать следующий код (который выводит значение 3):<br>
n = 3.1415927<br>
i = parseInt(n)<br>
document.write(i)
</p>
<p>
Или можно воспользоваться составной формой:<br>
document.write(parseInt(3.1415927))
</p>

<h4></h4>
<p>

</p>
<p>

</p>
<p></p>
<script>

</script>
<p></p>
<p></p>


<h4></h4>
<p>

</p>
<p>

</p>
<p></p>
<script>

</script>
<p></p>
<p></p>

<h4></h4>
<p>

</p>
<p>

</p>
<p></p>
<script>

</script>
<p></p>
<p></p>


<h4></h4>
<p>

</p>
<p>

</p>
<p></p>
<script>

</script>
<p></p>
<p></p>


<h4></h4>
<p>

</p>
<p>

</p>
<p></p>
<script>

</script>
<p></p>
<p></p>


<h4></h4>
<p>

</p>
<p>

</p>
<p></p>
<script>

</script>
<p></p>
<p></p>

<h4></h4>
<p>

</p>
<p>

</p>
<p></p>
<script>

</script>
<p></p>
<p></p>


<h4></h4>
<p>

</p>
<p>

</p>
<p></p>
<script>

</script>
<p></p>
<p></p>


<h4></h4>
<p>

</p>
<p>

</p>
<p></p>
<script>

</script>
<p></p>
<p></p>


<h4></h4>
<p>

</p>
<p>

</p>
<p></p>
<script>

</script>
<p></p>
<p></p>





		<p align="center">
		<a onclick="javascript: history.back(); return falshe;"><img src="../images/esc2.png" id="send"/></a>
		<a href="#top" title="Наверх"><img src="../images/buttonUpActive.png"/></a>
		</p>
		
	</body>
</html>