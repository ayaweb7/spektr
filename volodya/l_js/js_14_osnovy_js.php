<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link href="../css/screen.css" type="text/css" rel="stylesheet" />
<link rel="shortcut icon" type="image/ico" href="images/favicon.ico" />

<title>JavaScript</title>
</head>

	<body name="top">
<!-- !!!!!!!!!!!!!!!!!       шаблоны, заготовки для тэгов, комментарии !!!!!!!!!!!!!!! -->

<!-- Абзацы, заголовки, комментарии -->
<h4></h4>
<p>

</br>
</p>
<p></p>
<!-- Это комментарий HTML -->

<?php  ?>

<?php
/* 
Это область
многострочного комментария,
которая не будет
подвергаться интерпретации 
*/
?>

<!-- Шаблон для PHP кода с комментариями внутри кода -->
<h4></h4>
<p>

</br>
</p>
<p></p>
<?php
// 


// 

?>

<table id="inventory" class="realty">
	<tr><th></th><th></th><th></th></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
	<tr><td></td><td></td><td></td></tr>
</table>


<!-- !!!!!!!!!!!!!!!!!       шаблоны, заготовки для тэгов, комментарии !!!!!!!!!!!!!!! -->


<h4>JavaScript и текст HTML</h4>
<p>
JavaScript является языком сценариев, который работает исключительно на стороне клиента внутри браузера.<br>
Для вызова этого языка его код помещается между открывающим и закрывающим HTML-тегами script> и /script>.
</p>
<p>Пример 14.1. Фраза Hello World, отображаемая с помощью JavaScript</p>
script type="text/javascript"><br>
document.write("Hello World")<br>
/script><br>
noscript><br>
Ваш браузер не поддерживает JavaScript, или его поддержка отключена<br>
/noscript>

<p style='color: red;'>Start code</p>
<script type="text/javascript">
document.write("Hello World")
</script>
<noscript>
Ваш браузер не поддерживает JavaScript, или его поддержка отключена
</noscript>
<p>

<h4>Включение файлов JavaScript</h4>
<p>
В дополнение к внесению кода JavaScript непосредственно в HTML-документы вы можете включать в них файлы с кодом JavaScript или со своего сайта,
или из любого места в Интернете. Для этого используется следующий синтаксис:<br>
script type="text/javascript" src="script.js"> /script>
</p>
<p>
А для извлечения файла из Интернета применяется этот синтаксис:<br>
script type="text/javascript" src="http://someserver.com/script.js">
/script>
</p>

<h4>Отладка кода JavaScript</h4>
<table id="inventory" class="realty">
	<tr><th>Браузер</th><th>Способ доступа к сообщениям об ошибках JavaScript</th></tr>
	<tr><td>Apple Safari</td><td>В Safari нет консоли ошибок, включенной по умолчанию, но вы можете включить эту функцию, выбрав в меню пункты SafariНастройкиДополнения и установив флажок Показывать меню "Разработка" в строке меню. Кроме того, предпочтение можно отдать JavaScript-модулю Firebug Lite, который многие считают более простым в использовании</td></tr>
	<tr><td>Google Chrome</td><td>Щелкните на значке меню, который похож на страницу с загнутым углом, и выберите пункт РазработчикамКонсоль JavaScript. Можно также нажать сочетание клавиш Ctrl+Shift+J на PC или Command+Shift+J на Mac</td></tr>
	<tr><td>Microsoft Internet Explorer</td><td>Выберите команду СервисСвойства обозревателяДополнительно, снимите флажок Отключить отладку сценариев и установите флажок Показывать уведомление о каждой ошибке сценария</td></tr>
	<tr><td>Mozilla Firefox</td><td>Выберите команду ИнструментыКонсоль ошибок или воспользуйтесь сочетанием клавиш: Ctrl+Shift+J на PC или Command+Shift+J на Mac</td></tr>
	<tr><td>Opera</td><td>Выберите команду ИнструментыДополнительноКонсоль ошибок</td></tr>
</table>

<h4>Переменные</h4>
<p>
В JavaScript нет никаких идентификационных символов переменных, таких как знак доллара ($) в PHP.<br>
Вместо этого в отношении имен переменных действуют следующие правила.
</p>
<p>
1. Имена переменных могут включать только буквы a–z, A–Z, цифры 0–9, символ $ и символ подчеркивания (_).<br>
2. Никакие другие символы, включая пробелы или знаки пунктуации, использовать в именах переменных не допускается.<br>
3. Первым в имени переменной может быть символ из диапазонов a–z, A–Z, символ $ или символ подчеркивания _ (и никаких цифр).<br>
4. Имена чувствительны к регистру. Имена Count, count и COUNT принадлежат трем разным переменным.<br>
5. Ограничений на длину имени переменной не существует.
</p>

<h4>Строковые переменные</h4>
<p>
В JavaScript значения строковых переменных должны быть заключены либо в одиночные, либо в двойные кавычки:<br>
greeting = "Привет! "<br>
warning = 'Осторожно!'<br><br>
В строку в двойных кавычках можно включить одиночную кавычку или же в строку в одинарных кавычках можно включить двойную кавычку.
Но кавычка того же типа должна быть отключена с помощью символа обратного слеша:<br>
greeting = "\"Привет!\" является приветствием"<br>
warning = '\'Осторожно!\' является предупреждением'<br><br>
Чтобы прочитать значение из строковой переменной, его можно присвоить другой переменной:<br>
newstring = oldstring<br><br>
Или использовать его в функции:<br>
status = "Все системы работают успешно"<br>
document.write(status)
</p>

<h4>Числовые переменные</h4>
<p>
Создание числовой переменной сводится к простому присваиванию значения, как в следующих примерах:<br>
count = 42<br>
temperature = 98.4

<h4>Массивы</h4>
<p>
Чтобы присвоить массиву значения, используется следующий синтаксис (с помощью которого в данном случае создается строковый массив):<br>
toys = ['bat', 'ball', 'whistle', 'puzzle', 'doll']
</p>
<p>
Для создания многомерного массива более мелкие массивы вкладываются в более крупный.<br>
face =<br>
[<br>
['R', 'G', 'Y'],<br>
['W', 'R', 'O'],<br>
['Y', 'W', 'G']<br>
]<br><br>
Предыдущий пример был отформатирован так, чтобы было понятно, что именно происходит, но его можно переписать и в следующем виде:<br>
face = [['R', 'G', 'Y'], ['W', 'R', 'O'], ['Y', 'W', 'G']]<br><br>
или даже так:<br>
top = ['R', 'G', 'Y']<br>
mid = ['W', 'R', 'O']<br>
bot = ['Y', 'W', 'G']<br><br>
face = [top, mid, bot]
</p>
<p>
Для доступа к элементу, расположенному в этой матрице во второй сверху и в третьей слева ячейке, нужно воспользоваться следующим кодом
(нужно помнить, что позиционирование элементов массива начинается с нуля):<br>
document.write(face[1][2])<br>
Эта инструкция выведет букву O, означающую оранжевый цвет.
</p>

<h4>Операторы присваивания</h4>
<p>
Их линейка начинается простым знаком равенства (=) и продолжается сочетаниями +=, -= и т. д.<br>
Оператор += добавляет значение, находящееся справа, к переменной, находящейся слева, вместо того чтобы целиком заменить значение переменной в левой части.
Поэтому, если изначально значение переменной count было 6, то оператор count += 1<br>
установит для нее значение 7 точно так же, как и более привычный оператор присваивания:<br>
count = count + 1
</p>
<p>Таблица 14.3. Операторы присваивания</p>
<table id="inventory" class="realty">
	<tr><th>Оператор</th><th>Пример</th><th>Эквивалентен оператору</th></tr>
	<tr><td>=</td><td>j = 99</td><td>j = 99</td></tr>
	<tr><td>+=</td><td>j += 2</td><td>j = j + 2</td></tr>
	<tr><td>+=</td><td>j += 'string'</td><td>j = j + 'string'</td></tr>
	<tr><td>–=</td><td>j –= 12</td><td>j = j – 12</td></tr>
	<tr><td>*=</td><td>j *= 2</td><td>j = j * 2</td></tr>
	<tr><td>/=</td><td>j /= 6</td><td>j = j / 6</td></tr>
	<tr><td>%=</td><td>j %= 7</td><td>j = j % 7</td></tr>
</table>


<h4>Объединение строк</h4>
<p>
Объединение (конкатенация) строк в JavaScript осуществляется немного иначе, чем в PHP. Вместо оператора . (точка) используется знак «плюс» (+):<br>
document.write("У вас " + messages + " сообщения.")<br><br>
Если предположить, что переменной messages присвоено значение 3, эта строка кода выведет следующую информацию:<br>
У вас 3 сообщения.<br><br>
Оператор += точно так же, как и при добавлении значения к числовой переменной, позволяет добавить одну строку к другой:<br>
name = "James"<br>
name += " Dean"
</p>

<h4>Управляющие символы</h4>
<p>
Управляющие символы, пример использования которых вы видели при вставке в строку кавычек,
могут применяться также для вставки различных специальных символов: табуляции, новой строки и возврата каретки.
</p>
<table id="inventory" class="realty">
	<tr><th>Символ</th><th>Назначение</th></tr>
	<tr><td>\b</td><td>Забой</td></tr>
	<tr><td>\f</td><td>Перевод страницы</td></tr>
	<tr><td>\n</td><td>Новая строка</td></tr>
	<tr><td>\r</td><td>Возврат каретки</td></tr>
	<tr><td>\t</td><td>Табуляция</td></tr>
	<tr><td>\'</td><td>Одиночная кавычка</td></tr>
	<tr><td>\"</td><td>Двойная кавычка</td></tr>
	<tr><td>\\</td><td>Обратный слеш</td></tr>
	<tr><td>\XXX</td><td>Восьмеричное число в диапазоне от 000 до 377, представляющее эквивалент символа Latin-1 (например, \251 для символа ©)</td></tr>
	<tr><td>\xXX</td><td>Шестнадцатеричное число в диапазоне от 00 до FF, представляющее эквивалент символа Latin-1 (например, \xA9 для символа ©)</td></tr>
	<tr><td>\uXXXX</td><td>Шестнадцатеричное число в диапазоне от 0000 до FFFF, представляющее эквивалент символа Unicode (например, \u00A9 для символа ©)</td></tr>
</table>

<h4>Типизация переменных</h4>
<p>
1. Переменной n присваивается строковое значение "838102050", в следующей строке осуществляется вывод ее значения,
а чтобы посмотреть на ее тип, используется инструкция typeof.<br>
2. Переменной n присваивается значение, получаемое при перемножении чисел 12 345 и 67 890.
Это значение также равно 838 102 050, но оно является числом, а не строкой. Затем определяется и выводится на экран тип переменной.<br>
3. К числу n добавляется текст, и результат отображается на экране.
</p>
<p>Пример 14.8. Установка типа переменной путем присваивания ей значения</p>
<p>
n = '838102050' // Присваивание 'n' строкового значения<br>
document.write('n = ' + n + ', и имеет тип ' + typeof n + 'br>')<br><br>
n = 12345 * 67890; // Присваивание 'n' числа<br>
document.write('n = ' + n + ', и имеет тип ' + typeof n + 'br>')<br><br>
n += ' плюс текст' // Изменение типа 'n' с числового на строковое<br>
document.write('n = ' + n + ', и имеет тип ' + typeof n + 'br>')
</p>

<p style='color: red;'>Start code</p>
<script type="text/javascript">
n = '838102050' // Присваивание 'n' строкового значения
document.write('n = ' + n + ', и имеет тип ' + typeof n + '<br>')
n = 12345 * 67890; // Присваивание 'n' числа
document.write('n = ' + n + ', и имеет тип ' + typeof n + '<br>')
n += ' плюс текст' // Изменение типа 'n' с числового на строковое
document.write('n = ' + n + ', и имеет тип ' + typeof n + '<br>')
</script>

<h4>Функции</h4>
<p>
Для создания функции ее нужно объявить, как показано в примере 14.9.<br>
Пример 14.9. Объявление простой функции<br>
<br>
function product(a, b)<br>
{<br>
return a*b<br>
}<br>
<br>
Эта функция принимает два переданных ей параметра, перемножает их и возвращает произведение.
</p>

<h4>Объектная модель документа</h4>
<p>Пример 14.12. Чтение ссылки на URL-адрес с помощью JavaScript</p>
<p>
a id="mylink" href="http://mysite.com">Щелкни/a>br><br>
script><br>
url = document.links.mylink.href<br>
document.write('URL-адрес — ' + url)<br>
/script>
</p>

<p style='color: red;'>Start code</p>
<a id="mylink" href="http://volodya:8080/index.php">Щелкни</a><br>
<script>
url = document.links.mylink.href
document.write('URL-адрес — ' + url)
</script>
<p>
Вторая строка выведенной информации появилась благодаря работе метода document.write.<br>
Обратите внимание на то, как код следует сверху вниз по дереву документа от document к links, к mylink (идентификатору, присвоенному ссылке)
и к href (значению, содержащему URL-адрес назначения).<br><br>
Есть также краткая форма, работающая не менее успешно, которая начинается со значения, присвоенного атрибуту id: mylink.href. Поэтому следующую строку:<br>
url = document.links.mylink.href<br>
можно заменить строкой:<br>
url = mylink.href
</p>
<p>
В данном случае вместо использования дочернего объекта links, принадлежащего родительскому объекту document,
который Internet Explorer отказывается воспринимать таким образом, нужно применять метод, извлекающий элемент по его идентификатору.<br>
Поэтому следующую строку:<br>
url = document.links.mylink.href<br>
можно заменить строкой:<br>
url = document.getElementById('mylink').href<br>
когда не нужно искать элемент по его идентификатору, следующая краткая форма будет работать и в Internet Explorer,
как, собственно, и во всех остальных браузерах:<br>
url = mylink.href
</p>

<h4>Использование DOM</h4>
<p>
На самом деле объект links является массивом, состоящим из URL-адресов, поэтому на URL mylink в примере 14.8
можно спокойно ссылаться во всех браузерах, используя для этого следующий код (поскольку это первая и единственная ссылка):<br>
url = document.links[0].href
</p>
<p>
Если нужно узнать, сколько ссылок содержится во всем документе, можно запросить свойство length объекта links:<br>
numlinks = document.links.length
</p>
<p style='color: blue;'>Start code_1</p>
<script>
document.write('Количество ссылок в документе:' + document.links.length + '<br>')
</script>

<p>
Благодаря этому свойству можно извлечь и отобразить все имеющиеся в документе ссылки:<br>
for (j=0 ; j < document.links.length ; ++j)<br>
document.write(document.links[j].href + 'br>')
</p>
<p style='color: green;'>Start code_2</p>
<script>
document.write('Ссылки в настоящем документе:' + '<br>')
for (j=0 ; j < document.links.length ; ++j)
document.write(j + ': ' + document.links[j].href + '<br>')
</script>
<p>
Например, чтобы отправить браузер назад на три страницы, нужно выдать следующую команду:<br>
history.go(-3)<br><br>
Для перехода вперед и назад на одну страницу можно воспользоваться также следующими методами:<br>
history.back()<br>
history.forward()<br><br>
Подобным способом можно заменить только что загруженный URL-адрес другим по вашему выбору:<br>
document.location.href = 'http://google.com'
</p>
<p></p>
<?php

?>

<h4></h4>
<p>

</p>
<script type="text/javascript">

</script>
<p>

</p>
<p></p>
<?php

?>

<h4></h4>
<p>

</p>
<script type="text/javascript">

</script>
<p>

</p>
<p></p>
<?php

?>

<h4></h4>
<p>

</p>
<script type="text/javascript">

</script>
<p>

</p>
<p></p>
<?php

?>

<h4></h4>
<p>

</p>
<script type="text/javascript">

</script>
<p>

</p>
<p></p>
<?php

?>

<h4></h4>
<p>

</p>
<script type="text/javascript">

</script>
<p>

</p>
<p></p>
<?php

?>

<h4></h4>
<p>

</p>
<script type="text/javascript">

</script>
<p>

</p>
<p></p>
<?php

?>

<h4></h4>
<p>

</p>
<script type="text/javascript">

</script>
<p>

</p>
<p></p>
<?php

?>


		<p align="center">
		<a onclick="javascript: history.back(); return falshe;"><img src="../images/esc2.png" id="send"/></a>
		<a href="#top" title="Наверх"><img src="../images/buttonUpActive.png"/></a>
		</p>
		
	</body>
</html>